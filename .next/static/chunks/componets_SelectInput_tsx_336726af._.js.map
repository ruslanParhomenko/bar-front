{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/Parhomenco/Desktop/front/bar-front/componets/SelectInput.tsx"],"sourcesContent":["\"use client\";\nimport {\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@mui/material\";\nimport {\n  Control,\n  Controller,\n  FieldValues,\n  RegisterOptions,\n  useFormContext,\n} from \"react-hook-form\";\n\nconst SelectInput = ({\n  fieldLabel,\n  fieldName,\n  rules,\n  disabled = false,\n  multiple = false,\n  variant = \"outlined\",\n  options = [],\n  defaultValue,\n  additionalOnChange = () => null,\n  control,\n}: {\n  fieldLabel: string;\n  fieldName: string;\n  options: { label: string; value: any; [key: string]: any }[];\n  rules?: RegisterOptions;\n  disabled?: boolean;\n  multiple?: boolean;\n  variant?: \"filled\" | \"standard\" | \"outlined\" | undefined;\n  defaultValue?: string;\n  additionalOnChange?: (selectedOption: any) => void;\n  control?: Control<FieldValues>;\n}) => {\n  const { control: ctxControl } = useFormContext();\n  return (\n    <Controller\n      name={fieldName}\n      control={control ?? ctxControl}\n      defaultValue={defaultValue ?? \"\"}\n      rules={rules}\n      render={({ field, fieldState: { error, invalid } }) => (\n        <FormControl fullWidth variant={variant} key={field.value || \"\"}>\n          <InputLabel>{fieldLabel}</InputLabel>\n\n          <Select\n            {...field}\n            value={field.value ?? \"\"}\n            label={fieldLabel}\n            disabled={disabled}\n            multiple={multiple}\n            error={invalid}\n            onChange={(e) => {\n              const value = e.target.value;\n              field.onChange(value);\n              const selectedOption = value\n                ? options.find((el) => el.value === value)\n                : null;\n              additionalOnChange(selectedOption);\n            }}\n          >\n            {options.map((option, index) => {\n              return (\n                <MenuItem key={`${option.value}-${index}`} value={option.value}>\n                  <Typography noWrap>{option.label}</Typography>\n                </MenuItem>\n              );\n            })}\n          </Select>\n\n          {error?.message && invalid && (\n            <FormHelperText error>{error.message}</FormHelperText>\n          )}\n        </FormControl>\n      )}\n    />\n  );\n};\n\nexport default SelectInput;\n"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;AATA;;;AAiBA,MAAM,cAAc,CAAC,EACnB,UAAU,EACV,SAAS,EACT,KAAK,EACL,WAAW,KAAK,EAChB,WAAW,KAAK,EAChB,UAAU,UAAU,EACpB,UAAU,EAAE,EACZ,YAAY,EACZ,qBAAqB,IAAM,IAAI,EAC/B,OAAO,EAYR;;IACC,MAAM,EAAE,SAAS,UAAU,EAAE,GAAG,CAAA,GAAA,iKAAA,CAAA,iBAAc,AAAD;IAC7C,qBACE,6LAAC,iKAAA,CAAA,aAAU;QACT,MAAM;QACN,SAAS,WAAW;QACpB,cAAc,gBAAgB;QAC9B,OAAO;QACP,QAAQ,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,iBAChD,6LAAC,mNAAA,CAAA,cAAW;gBAAC,SAAS;gBAAC,SAAS;;kCAC9B,6LAAC,gNAAA,CAAA,aAAU;kCAAE;;;;;;kCAEb,6LAAC,oMAAA,CAAA,SAAM;wBACJ,GAAG,KAAK;wBACT,OAAO,MAAM,KAAK,IAAI;wBACtB,OAAO;wBACP,UAAU;wBACV,UAAU;wBACV,OAAO;wBACP,UAAU,CAAC;4BACT,MAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;4BAC5B,MAAM,QAAQ,CAAC;4BACf,MAAM,iBAAiB,QACnB,QAAQ,IAAI,CAAC,CAAC,KAAO,GAAG,KAAK,KAAK,SAClC;4BACJ,mBAAmB;wBACrB;kCAEC,QAAQ,GAAG,CAAC,CAAC,QAAQ;4BACpB,qBACE,6LAAC,0MAAA,CAAA,WAAQ;gCAAkC,OAAO,OAAO,KAAK;0CAC5D,cAAA,6LAAC,gNAAA,CAAA,aAAU;oCAAC,MAAM;8CAAE,OAAO,KAAK;;;;;;+BADnB,GAAG,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;;;;;wBAI7C;;;;;;oBAGD,OAAO,WAAW,yBACjB,6LAAC,4NAAA,CAAA,iBAAc;wBAAC,KAAK;kCAAE,MAAM,OAAO;;;;;;;eA7BM,MAAM,KAAK,IAAI;;;;;;;;;;AAmCrE;GAlEM;;QAuB4B,iKAAA,CAAA,iBAAc;;;KAvB1C;uCAoES","debugId":null}}]
}